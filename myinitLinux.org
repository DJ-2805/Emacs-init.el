* User Information
** Makes full screen and puts user info
#+BEGIN_SRC emacs-lisp
  ;;(set-frame-parameter nil 'fullscreen 'fullboth)

  (setq user-full-name ""
	user-mail-address ""
	calendar-latitude 0
	calendar-longitude 0
	calendar-location-name "")
#+END_SRC

* Emacs UI
** Removing Some StartUp
*** removes tool bar
*** removes menu bar
*** removes scroll bar
*** removes tutorial emacs page
*** sets yes or no to y or n
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Highlight
*** highlights bar of cursor
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode t)
#+END_SRC

** Tab Bar
*** lists buffers in a sperate page for organization
*** Creates tab bar for Emacs
#+BEGIN_SRC emacs-lisp
(defalias 'list-buffers 'ibuffer)
(use-package tabbar
  :ensure t
  :config
  (tabbar-mode 1))
#+END_SRC

** Line Numbering
*** adds line numbers, and a space inbetween numbers
#+BEGIN_SRC emacs-lisp
  (global-linum-mode 1)
#+END_SRC
** Theme
*** loads themes for emacs
*** if statement is to switch themes between gui and terminal
#+BEGIN_SRC emacs-lisp
  (load-theme 'darkburn t)

  ;;(load-theme 'spacemacs-theme t)
  ;;(use-package zenburn-theme
  ;;  :ensure t)

  ;;(defvar zenburn-override-colors-alist
  ;;  '(("zenburn-bg-2" . "#000000")))
  ;;(load-theme 'zenburn t)

  ;;(load-theme 'misterioso)
  ;;(load-theme 'tango-dark)
  ;;(if (display-graphic-p)
  ;;    (enable-theme 'misterioso)
  ;;  (enable-theme 'tango-dark))
#+END_SRC

** Collapse Fringes
*** Collapses side fringes to save space
#+BEGIN_SRC emacs-lisp
  (fringe-mode -1)
  (setq powerline-default-separator nil)
#+END_SRC
** CamelCase Moving
#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
#+END_SRC
** Pair Paranthesis
*** puts two paranthesis or other icons when typing
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
			      (?\( . ?\))
			      (?\[ . ?\])
			      (?\{ . ?\})
			      (?\" . ?\")
			      ))
  (electric-pair-mode t)
#+END_SRC
** Kill Whole Word
*** adds a command to delete the entire word the cursor is on
#+BEGIN_SRC emacs-lisp
  (defun kill-whole-word ()
    (interactive)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c w") 'kill-whole-word)
#+END_SRC
** Remove Auto Saving
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+END_SRC
** Dashboard
*** sets the start screen
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 10)))
    (setq dashboard-banner-logo-title "")
    (setq dashboard-startup-banner 'logo))

  (add-to-list 'dashboard-items '(agenda) t)

#+END_SRC
** Spaceline
*** makes the mode line more readable
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    (setq spaceline-buffer-encoding-abbrev-p nil)
    (setq spaceline-line-column-p nil)
    (setq spaceline-line-p nil)
    (setq powerline-default-separator (quote arrow))
    (spaceline-spacemacs-theme))
#+END_SRC
** Battery
*** sets a fancy battery on the mode line
*** battery is turned off if not on GUI
#+BEGIN_SRC emacs-lisp
  (use-package fancy-battery
    :ensure t
    :config
    (setq fancy-battery-show-percentage t)
    (setq battery-update-interval 15)
    (if window-system
	(fancy-battery-mode)
      (display-battery-mode)))
#+END_SRC
** Time
*** Sets how time would display with day
#+BEGIN_SRC emacs-lisp
  (setq display-time-24hr-format t)
  (setq display-time-format "%H:%M - %d %B %Y")

  (display-time-mode 1)
#+END_SRC
** System Monitor
#+BEGIN_SRC emacs-lisp
  (use-package symon
    :ensure t
    :bind
    ("s-h" . symon-mode))
#+END_SRC
* Misc Packages
** Try 
*** haves emacs only try a package rather than install
#+BEGIN_SRC emacs-lisp
(use-package try
	     :ensure t)
#+END_SRC

** Which Key
*** helps with C-x shortcuts, if user forgets
#+BEGIN_SRC emacs-lisp
(use-package which-key
	     :ensure t
	     :config (which-key-mode))
#+END_SRC

** Swiper
*** search function
#+BEGIN_SRC emacs-lisp
(use-package swiper
  :ensure try
  :bind (("C-s" . swiper)
	 ("C-r" . swiper)
	 ("C-c C-r" . ive-resume)
	 ("M-x" . counsel-M-x)
	 ("C-x C-f" . counsel-find-file))
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    ))
#+END_SRC

** Avy
*** helps move through buffer
#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t
  :bind ("M-s" . avy-goto-char))
#+END_SRC

* Programming Packages
** Counsel
*** list possible outcomes for typing
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :bind
    (("M-y" . counsel-yank-pop)
     :map ivy-minibuffer-map
     ("M-y" . ivy-next-line)))
#+END_SRC
** Ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :diminish (ivy-mode)
    :bind (("C-x b" . ivy-switch-buffer))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "%d/%d ")
    (setq ivy-display-style 'fancy))
#+END_SRC
** Flycheck
*** checks coding syntax
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :init
  (global-flycheck-mode t))
#+END_SRC

** Hungry Delete
*** deletes all white space between text when deleting
#+BEGIN_SRC emacs-lisp
(use-package hungry-delete
  :ensure t
  :config
  (global-hungry-delete-mode))
#+END_SRC

** iEdit
*** allows editing of multiple words at one time
#+BEGIN_SRC emacs-lisp
(use-package iedit
  :ensure t)
#+END_SRC

** Expand Region
*** highlights within a parenthesis
*** expands out left and right
#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :ensure t
  :config
  (global-set-key (kbd "C-=") 'er/expand-region))
#+END_SRC

** Version Control
*** loads file if new one is saved
*** helpful for files on shared drives
#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode 1)
(setq auto-revert-verbose nil)
#+END_SRC
** Dump-Jump
*** Helps with project movement
**** if move over function, can lead to where else it is called
#+BEGIN_SRC emacs-lisp
;;  (use-package dump-jump
;;    :bind(("M-g o" . dump-jump-go-other-window)
;;	  ("M-g j" . dump-jump-go)
;;	  ("M-g x" . dump-jump-go-prefer-external)
;;	  ("M-g z" . dump-jump-go-prefer-external-other-window))
;;    :config (setq dump-jump-selector 'ivy)
;;    :ensure t)
#+END_SRC
** Projectile
*** A way to define what are your project directories
*** makes it more efficient for moving around
#+BEGIN_SRC emacs-lisp
;;  (use-package projectile
;;    :ensure t
;;    :config
;;    (projectile-global-mode)
;;    (setq projectile-completion-system 'ivy))
;;
;;  (use-package counsel-projectile
;;    :ensure t
;;    :config
;;    (counsel-projectile-on))
#+END_SRC
** Emmet
*** Helps with making HTML and CSS tags for web dev
#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
    :ensure t
    :config
    (add-hook 'sgml-mode-hook 'emmet-mode)  ;; Auto-start on any markup modes
    (add-hook 'web-mode-hook 'emmet-mode)   ;; Auto-start on any markup modes
    (add-hook 'css-mode-hook 'emmet-mode))   ;; enable Emmet's css abbreviation
#+END_SRC
** Auto Complete
*** Some extra configuration for auto complete
*** helps c/c++ files
#+BEGIN_SRC emacs-lisp
  (ac-config-default)
  (global-auto-complete-mode t)
  (add-to-list 'ac-modes 'c++-mode)

  ;; turn on semantic
  (semantic-mode 1)

  ;; define a function which adds semantic as backup to auto-complete
  (defun my:add-semantic-to-autocomplete()
    (add-to-list 'ac-sources 'ac-source-semantic))
  (add-hook 'c++-mode 'my:add-semantic-to-autocomplete)
#+END_SRC
** Solidity
   #+BEGIN_SRC emacs-lisp
     (require 'solidity-mode)
     (setq solidity-coment-style 'slash)
     (global-set-key (kbd "C-c C-g") 'solidity-estimate-gas-at-point)
     (setq solidity-flycheck-solc-checker-active t)
     (setq solidity-flycheck-solium-checker-active t)
   #+END_SRC
* Org Mode Packages
** Org Font
*** sets unicode symbols
#+BEGIN_SRC emacs-lisp
  (set-fontset-font "fontset-default" nil
		    (font-spec :size 20 :name "Symbola"))
#+END_SRC
** Org-Bullets
*** sets hierarchy stars to nicer bullets
#+BEGIN_SRC emacs-lisp
  (require 'org-bullets)
  (setq org-bullet-face-name (quote org-bullet-face))
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  (setq org-bullets-bullet-list '("§" "◉" "◎" "☉" "○" "∘" "∙"))
#+END_SRC

** Org-Reveal
*** allows conversion of org files into presentations
#+BEGIN_SRC emacs-lisp
  (use-package ox-reveal
    :ensure ox-reveal)

  (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
  (setq org-reveal.mathjax t)
#+END_SRC

*** allows html highlighting in org mode
#+BEGIN_SRC emacs-lisp

  (use-package htmlize
    :ensure t)

#+END_SRC

** Org-Ellipsis
*** changes the 3 dots to a certain character
#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis "↴")
#+END_SRC
** Org-Agenda
*** puts to agenda file created
*** kebinds org-agenda to "s-a"
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files (list "~/Documents/agenda/schedule.org"
			       "~/Documents/agenda/workout.org"))

  (global-set-key (kbd "s-a") 'org-agenda)
#+END_SRC
** Org-Capture
*** A way to place ideas and notes into specific files
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c c") 'org-capture)

  ;(setq org-capture-templates
  ;      '(("a" "Appointment" entry (file  "~/Dropbox/orgfiles/gcal.org" "Appointments")
  ;	 "* TODO %?\n:PROPERTIES:\n\n:END:\nDEADLINE: %^T \n %i\n")
  ;	("n" "Note" entry (file+headline "~/Dropbox/orgfiles/notes.org" "Notes")
  ;	 "* Note %?\n%T")
  ;	("l" "Link" entry (file+headline "~/Dropbox/orgfiles/links.org" "Links")
  ;	 "* %? %^L %^g \n%T" :prepend t)
  ;	("t" "To Do Item" entry (file+headline "~/Dropbox/orgfiles/i.org" "To Do Items")
  ;	 "* %?\n%T" :prepend t)
  ;	("j" "Journal" entry (file+datetree "~/Dropbox/journal.org")
  ;	 "* %?\nEntered on %U\n  %i\n  %a")))
#+END_SRC
** Syntax Highlight
*** Use syntax hightlighting in source blocks while editing
#+BEGIN_SRC emacs-lisp

(setq org-src-fontify-natively t)

#+END_SRC
** Line Wrapping
*** lines wrap when at the end of the screen
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook '(lambda () (visual-line-mode 1)))
#+END_SRC
* TeX Packages
** Automatically parse the file after loading it
#+BEGIN_SRC emacs-lisp
(setq TeX-parse-self t)
#+END_SRC
** AucTex
   #+BEGIN_SRC emacs-lisp
     ;;(require 'auctex)
     ;;(load "preview-latex.el" nil t t)
   #+END_SRC
** Preview Pane
   #+BEGIN_SRC emacs-lisp
     (use-package latex-preview-pane
       :ensure t)
     (latex-preview-pane-enable)
   #+END_SRC
** Always use pdflatex when compiling LaTeX documents
#+BEGIN_SRC emacs-lisp
(setq TeX-PDF-mode t)
#+END_SRC

** Set org bullets to sections for LaTeX documents
#+BEGIN_SRC  emacs-lisp
  (require 'ox-latex)
  (unless (boundp 'org-latex-classes)
    (setq org-latex-classes nil))
  (add-to-list 'org-latex-classes
	       '("article"
		 "\\documentclass{article}"
		 ("\\section{%s}" . "\\section*{%s}")
		 ("\\subsection{%s}" . "\\subsection*{%s}")
		 ("\\subsubsection{%s}" . "\\subsubsectin*{%s}")
		 ("\\paragraph{%s}" . "\\paragraph*{%s}")
		 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC
* Git Packages
** Git Gutter
*** Helps with version control
*** shows changes live between commits
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :ensure t
    :init
    (global-git-gutter-mode +1))
#+END_SRC

** Git Timemachine
*** Helps with git commits
*** shows previous commits and logic of user
#+BEGIN_SRC emacs-lisp
  (use-package git-timemachine
    :ensure t)
#+END_SRC
